Dart 
    - É uma linguagem apresentada pela google em 2011
    - Objetivo: ser uma opção ao TypeScript para desenvolvimento web
    - Começou a ser mais difundida com o advento do Flutter
        - Trouxe o dart como linguagem para o seu SDK
        - Dart VM
    - Linguagem muito parecida com a linguagem C
        - Lembra muito Java, C#, Javascript e PHP
    - É uma linguagem fortemente tipada
        - Porém, possibilita o uso também de tipos dinâmicos
    - É orientada a objetos

    - Pode ser compilada de duas formas diferentes:
    1 - Ahead=of-time(AOT): quando o código já é compilado para a linguagem nativa, possibilitando uma alta performance
    2 - Just-in-time: código é compilado com a aplicação em execução, possibilitando hot-reload 

    - Toda aplicação dart começa a executar a partir de um entry point "main()"
        - Sempre inicia pela pasta bin 
    - Lembrar sempre de configurar o arquivo launch.json para colocar o path do programa.

    - Lembrar de sempre utilizar o lint do dart e do Flutter
        - Auxilia o código a se manter mais organizado e limpo.

     - Sobre Testes:
        - Evita erros antes de ir para produção
        - Redução de custos com testes manuais
        - Confiabilidade do código.
        - O comando em dart para executar é o dart run test 
            - Utilização de matches
        ATENÇÃO: TODOS OS TESTES EM DART PRECISAM ACABAR COM A PALAVRA "test"


### ESTRUTURA DE UM PROJETO EM FLUTTER ###

++ Primeiros Componentes ++

Quando for criar um componente Flutter:
- flutter create -t app -a kotlin -i swift --org comp.app.eabs trilhaapp
- O primeiro arquivo a ser executado é o lib\main.dart
- É chamada uma função void
    - comando runApp
    - A classe MyApp estende de outra
    - Cria o evennto build é o que desenha a tela
    - O return MaterialApp é a nossa aplicação.
    - Stateful e Stateless são 2 tipos de construtores 
      de páginas.
    - Todo stateful tem que ter um estado.
    - Evento build é o que preenche a tela.
    - Scaffold é como se fosse um modelo template.

- Organizar as pages e services em pastas é importante para usabilidade e reaproveitamento
  das páginas e widgets.

- Para utilizar as fontes, usa-se o pacote do google fonts.
    - Altera-se o arquivo do pubscec.yaml com a dependência.
    - Há necessidade de habilidar o modo desenvolvedor: start ms-settings:developers

- Para trabalhar com shared_preferences:
    - ir no pub.dev
        - Site onde fica armazenado todos os pacotes do flutter